# Generated from TestFileParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import (
    ATNDeserializer,
    DFA,
    NoViableAltException,
    ParseTreeListener,
    ParseTreeVisitor,
    Parser,
    ParserATNSimulator,
    ParserRuleContext,
    PredictionContextCache,
    RecognitionException,
    Token,
    TokenStream,
)
import sys

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,
        1,
        94,
        395,
        2,
        0,
        7,
        0,
        2,
        1,
        7,
        1,
        2,
        2,
        7,
        2,
        2,
        3,
        7,
        3,
        2,
        4,
        7,
        4,
        2,
        5,
        7,
        5,
        2,
        6,
        7,
        6,
        2,
        7,
        7,
        7,
        2,
        8,
        7,
        8,
        2,
        9,
        7,
        9,
        2,
        10,
        7,
        10,
        2,
        11,
        7,
        11,
        2,
        12,
        7,
        12,
        2,
        13,
        7,
        13,
        2,
        14,
        7,
        14,
        2,
        15,
        7,
        15,
        2,
        16,
        7,
        16,
        2,
        17,
        7,
        17,
        2,
        18,
        7,
        18,
        2,
        19,
        7,
        19,
        2,
        20,
        7,
        20,
        2,
        21,
        7,
        21,
        2,
        22,
        7,
        22,
        2,
        23,
        7,
        23,
        2,
        24,
        7,
        24,
        2,
        25,
        7,
        25,
        2,
        26,
        7,
        26,
        2,
        27,
        7,
        27,
        2,
        28,
        7,
        28,
        2,
        29,
        7,
        29,
        2,
        30,
        7,
        30,
        2,
        31,
        7,
        31,
        2,
        32,
        7,
        32,
        2,
        33,
        7,
        33,
        2,
        34,
        7,
        34,
        2,
        35,
        7,
        35,
        2,
        36,
        7,
        36,
        2,
        37,
        7,
        37,
        2,
        38,
        7,
        38,
        2,
        39,
        7,
        39,
        2,
        40,
        7,
        40,
        2,
        41,
        7,
        41,
        2,
        42,
        7,
        42,
        2,
        43,
        7,
        43,
        2,
        44,
        7,
        44,
        1,
        0,
        1,
        0,
        4,
        0,
        93,
        8,
        0,
        11,
        0,
        12,
        0,
        94,
        1,
        0,
        1,
        0,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        1,
        2,
        1,
        2,
        1,
        3,
        1,
        3,
        1,
        3,
        1,
        3,
        5,
        3,
        109,
        8,
        3,
        10,
        3,
        12,
        3,
        112,
        9,
        3,
        1,
        4,
        1,
        4,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        3,
        5,
        124,
        8,
        5,
        1,
        5,
        1,
        5,
        1,
        5,
        1,
        6,
        1,
        6,
        4,
        6,
        131,
        8,
        6,
        11,
        6,
        12,
        6,
        132,
        1,
        7,
        1,
        7,
        1,
        7,
        5,
        7,
        138,
        8,
        7,
        10,
        7,
        12,
        7,
        141,
        9,
        7,
        1,
        8,
        1,
        8,
        3,
        8,
        145,
        8,
        8,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        1,
        9,
        3,
        9,
        163,
        8,
        9,
        1,
        10,
        1,
        10,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        11,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        12,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        13,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        14,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        15,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        16,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        17,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        18,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        19,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        20,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        21,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        22,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        23,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        24,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        25,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        26,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        3,
        27,
        237,
        8,
        27,
        1,
        27,
        1,
        27,
        1,
        27,
        3,
        27,
        242,
        8,
        27,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        3,
        28,
        250,
        8,
        28,
        1,
        28,
        1,
        28,
        1,
        28,
        3,
        28,
        255,
        8,
        28,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        3,
        29,
        261,
        8,
        29,
        1,
        29,
        1,
        29,
        3,
        29,
        265,
        8,
        29,
        1,
        29,
        1,
        29,
        3,
        29,
        269,
        8,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        3,
        29,
        275,
        8,
        29,
        1,
        29,
        1,
        29,
        3,
        29,
        279,
        8,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        1,
        29,
        3,
        29,
        285,
        8,
        29,
        1,
        29,
        1,
        29,
        3,
        29,
        289,
        8,
        29,
        1,
        30,
        1,
        30,
        3,
        30,
        293,
        8,
        30,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        1,
        31,
        3,
        31,
        313,
        8,
        31,
        1,
        32,
        1,
        32,
        3,
        32,
        317,
        8,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        32,
        1,
        33,
        1,
        33,
        3,
        33,
        325,
        8,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        33,
        1,
        34,
        1,
        34,
        3,
        34,
        333,
        8,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        34,
        1,
        35,
        1,
        35,
        3,
        35,
        341,
        8,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        1,
        35,
        3,
        35,
        349,
        8,
        35,
        1,
        36,
        1,
        36,
        3,
        36,
        353,
        8,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        36,
        1,
        37,
        1,
        37,
        3,
        37,
        361,
        8,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        37,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        1,
        38,
        3,
        38,
        373,
        8,
        38,
        1,
        39,
        1,
        39,
        1,
        40,
        1,
        40,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        41,
        1,
        42,
        1,
        42,
        1,
        43,
        1,
        43,
        1,
        44,
        1,
        44,
        1,
        44,
        5,
        44,
        390,
        8,
        44,
        10,
        44,
        12,
        44,
        393,
        9,
        44,
        1,
        44,
        0,
        0,
        45,
        0,
        2,
        4,
        6,
        8,
        10,
        12,
        14,
        16,
        18,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        42,
        44,
        46,
        48,
        50,
        52,
        54,
        56,
        58,
        60,
        62,
        64,
        66,
        68,
        70,
        72,
        74,
        76,
        78,
        80,
        82,
        84,
        86,
        88,
        0,
        4,
        1,
        0,
        14,
        16,
        1,
        0,
        5,
        6,
        2,
        0,
        7,
        8,
        82,
        82,
        1,
        0,
        9,
        13,
        413,
        0,
        90,
        1,
        0,
        0,
        0,
        2,
        98,
        1,
        0,
        0,
        0,
        4,
        101,
        1,
        0,
        0,
        0,
        6,
        104,
        1,
        0,
        0,
        0,
        8,
        113,
        1,
        0,
        0,
        0,
        10,
        115,
        1,
        0,
        0,
        0,
        12,
        128,
        1,
        0,
        0,
        0,
        14,
        134,
        1,
        0,
        0,
        0,
        16,
        144,
        1,
        0,
        0,
        0,
        18,
        162,
        1,
        0,
        0,
        0,
        20,
        164,
        1,
        0,
        0,
        0,
        22,
        166,
        1,
        0,
        0,
        0,
        24,
        170,
        1,
        0,
        0,
        0,
        26,
        174,
        1,
        0,
        0,
        0,
        28,
        178,
        1,
        0,
        0,
        0,
        30,
        182,
        1,
        0,
        0,
        0,
        32,
        186,
        1,
        0,
        0,
        0,
        34,
        190,
        1,
        0,
        0,
        0,
        36,
        194,
        1,
        0,
        0,
        0,
        38,
        198,
        1,
        0,
        0,
        0,
        40,
        202,
        1,
        0,
        0,
        0,
        42,
        206,
        1,
        0,
        0,
        0,
        44,
        210,
        1,
        0,
        0,
        0,
        46,
        214,
        1,
        0,
        0,
        0,
        48,
        218,
        1,
        0,
        0,
        0,
        50,
        222,
        1,
        0,
        0,
        0,
        52,
        226,
        1,
        0,
        0,
        0,
        54,
        241,
        1,
        0,
        0,
        0,
        56,
        254,
        1,
        0,
        0,
        0,
        58,
        288,
        1,
        0,
        0,
        0,
        60,
        292,
        1,
        0,
        0,
        0,
        62,
        312,
        1,
        0,
        0,
        0,
        64,
        314,
        1,
        0,
        0,
        0,
        66,
        322,
        1,
        0,
        0,
        0,
        68,
        330,
        1,
        0,
        0,
        0,
        70,
        338,
        1,
        0,
        0,
        0,
        72,
        350,
        1,
        0,
        0,
        0,
        74,
        358,
        1,
        0,
        0,
        0,
        76,
        372,
        1,
        0,
        0,
        0,
        78,
        374,
        1,
        0,
        0,
        0,
        80,
        376,
        1,
        0,
        0,
        0,
        82,
        378,
        1,
        0,
        0,
        0,
        84,
        382,
        1,
        0,
        0,
        0,
        86,
        384,
        1,
        0,
        0,
        0,
        88,
        386,
        1,
        0,
        0,
        0,
        90,
        92,
        3,
        2,
        1,
        0,
        91,
        93,
        3,
        12,
        6,
        0,
        92,
        91,
        1,
        0,
        0,
        0,
        93,
        94,
        1,
        0,
        0,
        0,
        94,
        92,
        1,
        0,
        0,
        0,
        94,
        95,
        1,
        0,
        0,
        0,
        95,
        96,
        1,
        0,
        0,
        0,
        96,
        97,
        5,
        0,
        0,
        1,
        97,
        1,
        1,
        0,
        0,
        0,
        98,
        99,
        3,
        4,
        2,
        0,
        99,
        100,
        3,
        6,
        3,
        0,
        100,
        3,
        1,
        0,
        0,
        0,
        101,
        102,
        5,
        1,
        0,
        0,
        102,
        103,
        5,
        2,
        0,
        0,
        103,
        5,
        1,
        0,
        0,
        0,
        104,
        105,
        5,
        3,
        0,
        0,
        105,
        110,
        5,
        33,
        0,
        0,
        106,
        107,
        5,
        89,
        0,
        0,
        107,
        109,
        5,
        33,
        0,
        0,
        108,
        106,
        1,
        0,
        0,
        0,
        109,
        112,
        1,
        0,
        0,
        0,
        110,
        108,
        1,
        0,
        0,
        0,
        110,
        111,
        1,
        0,
        0,
        0,
        111,
        7,
        1,
        0,
        0,
        0,
        112,
        110,
        1,
        0,
        0,
        0,
        113,
        114,
        5,
        4,
        0,
        0,
        114,
        9,
        1,
        0,
        0,
        0,
        115,
        116,
        5,
        82,
        0,
        0,
        116,
        117,
        5,
        85,
        0,
        0,
        117,
        118,
        3,
        14,
        7,
        0,
        118,
        123,
        5,
        86,
        0,
        0,
        119,
        120,
        5,
        87,
        0,
        0,
        120,
        121,
        3,
        88,
        44,
        0,
        121,
        122,
        5,
        88,
        0,
        0,
        122,
        124,
        1,
        0,
        0,
        0,
        123,
        119,
        1,
        0,
        0,
        0,
        123,
        124,
        1,
        0,
        0,
        0,
        124,
        125,
        1,
        0,
        0,
        0,
        125,
        126,
        5,
        90,
        0,
        0,
        126,
        127,
        3,
        16,
        8,
        0,
        127,
        11,
        1,
        0,
        0,
        0,
        128,
        130,
        3,
        8,
        4,
        0,
        129,
        131,
        3,
        10,
        5,
        0,
        130,
        129,
        1,
        0,
        0,
        0,
        131,
        132,
        1,
        0,
        0,
        0,
        132,
        130,
        1,
        0,
        0,
        0,
        132,
        133,
        1,
        0,
        0,
        0,
        133,
        13,
        1,
        0,
        0,
        0,
        134,
        139,
        3,
        18,
        9,
        0,
        135,
        136,
        5,
        89,
        0,
        0,
        136,
        138,
        3,
        18,
        9,
        0,
        137,
        135,
        1,
        0,
        0,
        0,
        138,
        141,
        1,
        0,
        0,
        0,
        139,
        137,
        1,
        0,
        0,
        0,
        139,
        140,
        1,
        0,
        0,
        0,
        140,
        15,
        1,
        0,
        0,
        0,
        141,
        139,
        1,
        0,
        0,
        0,
        142,
        145,
        3,
        18,
        9,
        0,
        143,
        145,
        3,
        80,
        40,
        0,
        144,
        142,
        1,
        0,
        0,
        0,
        144,
        143,
        1,
        0,
        0,
        0,
        145,
        17,
        1,
        0,
        0,
        0,
        146,
        163,
        3,
        22,
        11,
        0,
        147,
        163,
        3,
        24,
        12,
        0,
        148,
        163,
        3,
        26,
        13,
        0,
        149,
        163,
        3,
        28,
        14,
        0,
        150,
        163,
        3,
        30,
        15,
        0,
        151,
        163,
        3,
        32,
        16,
        0,
        152,
        163,
        3,
        34,
        17,
        0,
        153,
        163,
        3,
        38,
        19,
        0,
        154,
        163,
        3,
        40,
        20,
        0,
        155,
        163,
        3,
        36,
        18,
        0,
        156,
        163,
        3,
        42,
        21,
        0,
        157,
        163,
        3,
        44,
        22,
        0,
        158,
        163,
        3,
        46,
        23,
        0,
        159,
        163,
        3,
        48,
        24,
        0,
        160,
        163,
        3,
        50,
        25,
        0,
        161,
        163,
        3,
        52,
        26,
        0,
        162,
        146,
        1,
        0,
        0,
        0,
        162,
        147,
        1,
        0,
        0,
        0,
        162,
        148,
        1,
        0,
        0,
        0,
        162,
        149,
        1,
        0,
        0,
        0,
        162,
        150,
        1,
        0,
        0,
        0,
        162,
        151,
        1,
        0,
        0,
        0,
        162,
        152,
        1,
        0,
        0,
        0,
        162,
        153,
        1,
        0,
        0,
        0,
        162,
        154,
        1,
        0,
        0,
        0,
        162,
        155,
        1,
        0,
        0,
        0,
        162,
        156,
        1,
        0,
        0,
        0,
        162,
        157,
        1,
        0,
        0,
        0,
        162,
        158,
        1,
        0,
        0,
        0,
        162,
        159,
        1,
        0,
        0,
        0,
        162,
        160,
        1,
        0,
        0,
        0,
        162,
        161,
        1,
        0,
        0,
        0,
        163,
        19,
        1,
        0,
        0,
        0,
        164,
        165,
        7,
        0,
        0,
        0,
        165,
        21,
        1,
        0,
        0,
        0,
        166,
        167,
        5,
        32,
        0,
        0,
        167,
        168,
        5,
        81,
        0,
        0,
        168,
        169,
        3,
        60,
        30,
        0,
        169,
        23,
        1,
        0,
        0,
        0,
        170,
        171,
        5,
        14,
        0,
        0,
        171,
        172,
        5,
        81,
        0,
        0,
        172,
        173,
        5,
        41,
        0,
        0,
        173,
        25,
        1,
        0,
        0,
        0,
        174,
        175,
        5,
        14,
        0,
        0,
        175,
        176,
        5,
        81,
        0,
        0,
        176,
        177,
        5,
        42,
        0,
        0,
        177,
        27,
        1,
        0,
        0,
        0,
        178,
        179,
        5,
        14,
        0,
        0,
        179,
        180,
        5,
        81,
        0,
        0,
        180,
        181,
        5,
        43,
        0,
        0,
        181,
        29,
        1,
        0,
        0,
        0,
        182,
        183,
        5,
        14,
        0,
        0,
        183,
        184,
        5,
        81,
        0,
        0,
        184,
        185,
        5,
        44,
        0,
        0,
        185,
        31,
        1,
        0,
        0,
        0,
        186,
        187,
        3,
        20,
        10,
        0,
        187,
        188,
        5,
        81,
        0,
        0,
        188,
        189,
        5,
        45,
        0,
        0,
        189,
        33,
        1,
        0,
        0,
        0,
        190,
        191,
        3,
        20,
        10,
        0,
        191,
        192,
        5,
        81,
        0,
        0,
        192,
        193,
        5,
        46,
        0,
        0,
        193,
        35,
        1,
        0,
        0,
        0,
        194,
        195,
        3,
        20,
        10,
        0,
        195,
        196,
        5,
        81,
        0,
        0,
        196,
        197,
        3,
        70,
        35,
        0,
        197,
        37,
        1,
        0,
        0,
        0,
        198,
        199,
        5,
        17,
        0,
        0,
        199,
        200,
        5,
        81,
        0,
        0,
        200,
        201,
        5,
        68,
        0,
        0,
        201,
        39,
        1,
        0,
        0,
        0,
        202,
        203,
        5,
        33,
        0,
        0,
        203,
        204,
        5,
        81,
        0,
        0,
        204,
        205,
        5,
        69,
        0,
        0,
        205,
        41,
        1,
        0,
        0,
        0,
        206,
        207,
        5,
        21,
        0,
        0,
        207,
        208,
        5,
        81,
        0,
        0,
        208,
        209,
        5,
        51,
        0,
        0,
        209,
        43,
        1,
        0,
        0,
        0,
        210,
        211,
        5,
        20,
        0,
        0,
        211,
        212,
        5,
        81,
        0,
        0,
        212,
        213,
        5,
        52,
        0,
        0,
        213,
        45,
        1,
        0,
        0,
        0,
        214,
        215,
        5,
        19,
        0,
        0,
        215,
        216,
        5,
        81,
        0,
        0,
        216,
        217,
        5,
        71,
        0,
        0,
        217,
        47,
        1,
        0,
        0,
        0,
        218,
        219,
        5,
        18,
        0,
        0,
        219,
        220,
        5,
        81,
        0,
        0,
        220,
        221,
        5,
        72,
        0,
        0,
        221,
        49,
        1,
        0,
        0,
        0,
        222,
        223,
        5,
        30,
        0,
        0,
        223,
        224,
        5,
        81,
        0,
        0,
        224,
        225,
        5,
        73,
        0,
        0,
        225,
        51,
        1,
        0,
        0,
        0,
        226,
        227,
        5,
        31,
        0,
        0,
        227,
        228,
        5,
        81,
        0,
        0,
        228,
        229,
        5,
        74,
        0,
        0,
        229,
        53,
        1,
        0,
        0,
        0,
        230,
        231,
        5,
        22,
        0,
        0,
        231,
        232,
        5,
        14,
        0,
        0,
        232,
        233,
        5,
        24,
        0,
        0,
        233,
        236,
        1,
        0,
        0,
        0,
        234,
        235,
        5,
        14,
        0,
        0,
        235,
        237,
        5,
        25,
        0,
        0,
        236,
        234,
        1,
        0,
        0,
        0,
        236,
        237,
        1,
        0,
        0,
        0,
        237,
        242,
        1,
        0,
        0,
        0,
        238,
        239,
        5,
        22,
        0,
        0,
        239,
        240,
        5,
        14,
        0,
        0,
        240,
        242,
        5,
        25,
        0,
        0,
        241,
        230,
        1,
        0,
        0,
        0,
        241,
        238,
        1,
        0,
        0,
        0,
        242,
        55,
        1,
        0,
        0,
        0,
        243,
        244,
        5,
        22,
        0,
        0,
        244,
        245,
        5,
        14,
        0,
        0,
        245,
        246,
        5,
        26,
        0,
        0,
        246,
        249,
        1,
        0,
        0,
        0,
        247,
        248,
        5,
        23,
        0,
        0,
        248,
        250,
        3,
        58,
        29,
        0,
        249,
        247,
        1,
        0,
        0,
        0,
        249,
        250,
        1,
        0,
        0,
        0,
        250,
        255,
        1,
        0,
        0,
        0,
        251,
        252,
        5,
        22,
        0,
        0,
        252,
        253,
        5,
        23,
        0,
        0,
        253,
        255,
        3,
        58,
        29,
        0,
        254,
        243,
        1,
        0,
        0,
        0,
        254,
        251,
        1,
        0,
        0,
        0,
        255,
        57,
        1,
        0,
        0,
        0,
        256,
        257,
        5,
        14,
        0,
        0,
        257,
        260,
        5,
        27,
        0,
        0,
        258,
        259,
        5,
        14,
        0,
        0,
        259,
        261,
        5,
        25,
        0,
        0,
        260,
        258,
        1,
        0,
        0,
        0,
        260,
        261,
        1,
        0,
        0,
        0,
        261,
        264,
        1,
        0,
        0,
        0,
        262,
        263,
        5,
        14,
        0,
        0,
        263,
        265,
        5,
        28,
        0,
        0,
        264,
        262,
        1,
        0,
        0,
        0,
        264,
        265,
        1,
        0,
        0,
        0,
        265,
        268,
        1,
        0,
        0,
        0,
        266,
        267,
        5,
        14,
        0,
        0,
        267,
        269,
        5,
        29,
        0,
        0,
        268,
        266,
        1,
        0,
        0,
        0,
        268,
        269,
        1,
        0,
        0,
        0,
        269,
        289,
        1,
        0,
        0,
        0,
        270,
        271,
        5,
        14,
        0,
        0,
        271,
        274,
        5,
        25,
        0,
        0,
        272,
        273,
        5,
        14,
        0,
        0,
        273,
        275,
        5,
        28,
        0,
        0,
        274,
        272,
        1,
        0,
        0,
        0,
        274,
        275,
        1,
        0,
        0,
        0,
        275,
        278,
        1,
        0,
        0,
        0,
        276,
        277,
        5,
        14,
        0,
        0,
        277,
        279,
        5,
        29,
        0,
        0,
        278,
        276,
        1,
        0,
        0,
        0,
        278,
        279,
        1,
        0,
        0,
        0,
        279,
        289,
        1,
        0,
        0,
        0,
        280,
        281,
        5,
        14,
        0,
        0,
        281,
        284,
        5,
        28,
        0,
        0,
        282,
        283,
        5,
        14,
        0,
        0,
        283,
        285,
        5,
        29,
        0,
        0,
        284,
        282,
        1,
        0,
        0,
        0,
        284,
        285,
        1,
        0,
        0,
        0,
        285,
        289,
        1,
        0,
        0,
        0,
        286,
        287,
        5,
        14,
        0,
        0,
        287,
        289,
        5,
        29,
        0,
        0,
        288,
        256,
        1,
        0,
        0,
        0,
        288,
        270,
        1,
        0,
        0,
        0,
        288,
        280,
        1,
        0,
        0,
        0,
        288,
        286,
        1,
        0,
        0,
        0,
        289,
        59,
        1,
        0,
        0,
        0,
        290,
        293,
        3,
        62,
        31,
        0,
        291,
        293,
        3,
        76,
        38,
        0,
        292,
        290,
        1,
        0,
        0,
        0,
        292,
        291,
        1,
        0,
        0,
        0,
        293,
        61,
        1,
        0,
        0,
        0,
        294,
        313,
        5,
        68,
        0,
        0,
        295,
        313,
        5,
        41,
        0,
        0,
        296,
        313,
        5,
        42,
        0,
        0,
        297,
        313,
        5,
        43,
        0,
        0,
        298,
        313,
        5,
        44,
        0,
        0,
        299,
        313,
        5,
        45,
        0,
        0,
        300,
        313,
        5,
        46,
        0,
        0,
        301,
        313,
        5,
        69,
        0,
        0,
        302,
        313,
        5,
        48,
        0,
        0,
        303,
        313,
        5,
        71,
        0,
        0,
        304,
        313,
        5,
        72,
        0,
        0,
        305,
        313,
        5,
        51,
        0,
        0,
        306,
        313,
        5,
        52,
        0,
        0,
        307,
        313,
        5,
        74,
        0,
        0,
        308,
        313,
        5,
        73,
        0,
        0,
        309,
        313,
        5,
        55,
        0,
        0,
        310,
        311,
        5,
        67,
        0,
        0,
        311,
        313,
        5,
        82,
        0,
        0,
        312,
        294,
        1,
        0,
        0,
        0,
        312,
        295,
        1,
        0,
        0,
        0,
        312,
        296,
        1,
        0,
        0,
        0,
        312,
        297,
        1,
        0,
        0,
        0,
        312,
        298,
        1,
        0,
        0,
        0,
        312,
        299,
        1,
        0,
        0,
        0,
        312,
        300,
        1,
        0,
        0,
        0,
        312,
        301,
        1,
        0,
        0,
        0,
        312,
        302,
        1,
        0,
        0,
        0,
        312,
        303,
        1,
        0,
        0,
        0,
        312,
        304,
        1,
        0,
        0,
        0,
        312,
        305,
        1,
        0,
        0,
        0,
        312,
        306,
        1,
        0,
        0,
        0,
        312,
        307,
        1,
        0,
        0,
        0,
        312,
        308,
        1,
        0,
        0,
        0,
        312,
        309,
        1,
        0,
        0,
        0,
        312,
        310,
        1,
        0,
        0,
        0,
        313,
        63,
        1,
        0,
        0,
        0,
        314,
        316,
        5,
        78,
        0,
        0,
        315,
        317,
        5,
        92,
        0,
        0,
        316,
        315,
        1,
        0,
        0,
        0,
        316,
        317,
        1,
        0,
        0,
        0,
        317,
        318,
        1,
        0,
        0,
        0,
        318,
        319,
        5,
        83,
        0,
        0,
        319,
        320,
        3,
        78,
        39,
        0,
        320,
        321,
        5,
        84,
        0,
        0,
        321,
        65,
        1,
        0,
        0,
        0,
        322,
        324,
        5,
        79,
        0,
        0,
        323,
        325,
        5,
        92,
        0,
        0,
        324,
        323,
        1,
        0,
        0,
        0,
        324,
        325,
        1,
        0,
        0,
        0,
        325,
        326,
        1,
        0,
        0,
        0,
        326,
        327,
        5,
        83,
        0,
        0,
        327,
        328,
        3,
        78,
        39,
        0,
        328,
        329,
        5,
        84,
        0,
        0,
        329,
        67,
        1,
        0,
        0,
        0,
        330,
        332,
        5,
        80,
        0,
        0,
        331,
        333,
        5,
        92,
        0,
        0,
        332,
        331,
        1,
        0,
        0,
        0,
        332,
        333,
        1,
        0,
        0,
        0,
        333,
        334,
        1,
        0,
        0,
        0,
        334,
        335,
        5,
        83,
        0,
        0,
        335,
        336,
        3,
        78,
        39,
        0,
        336,
        337,
        5,
        84,
        0,
        0,
        337,
        69,
        1,
        0,
        0,
        0,
        338,
        340,
        5,
        75,
        0,
        0,
        339,
        341,
        5,
        92,
        0,
        0,
        340,
        339,
        1,
        0,
        0,
        0,
        340,
        341,
        1,
        0,
        0,
        0,
        341,
        348,
        1,
        0,
        0,
        0,
        342,
        343,
        5,
        83,
        0,
        0,
        343,
        344,
        3,
        78,
        39,
        0,
        344,
        345,
        5,
        89,
        0,
        0,
        345,
        346,
        3,
        78,
        39,
        0,
        346,
        347,
        5,
        84,
        0,
        0,
        347,
        349,
        1,
        0,
        0,
        0,
        348,
        342,
        1,
        0,
        0,
        0,
        348,
        349,
        1,
        0,
        0,
        0,
        349,
        71,
        1,
        0,
        0,
        0,
        350,
        352,
        5,
        76,
        0,
        0,
        351,
        353,
        5,
        92,
        0,
        0,
        352,
        351,
        1,
        0,
        0,
        0,
        352,
        353,
        1,
        0,
        0,
        0,
        353,
        354,
        1,
        0,
        0,
        0,
        354,
        355,
        5,
        83,
        0,
        0,
        355,
        356,
        3,
        78,
        39,
        0,
        356,
        357,
        5,
        84,
        0,
        0,
        357,
        73,
        1,
        0,
        0,
        0,
        358,
        360,
        5,
        77,
        0,
        0,
        359,
        361,
        5,
        92,
        0,
        0,
        360,
        359,
        1,
        0,
        0,
        0,
        360,
        361,
        1,
        0,
        0,
        0,
        361,
        362,
        1,
        0,
        0,
        0,
        362,
        363,
        5,
        83,
        0,
        0,
        363,
        364,
        3,
        78,
        39,
        0,
        364,
        365,
        5,
        84,
        0,
        0,
        365,
        75,
        1,
        0,
        0,
        0,
        366,
        373,
        3,
        64,
        32,
        0,
        367,
        373,
        3,
        66,
        33,
        0,
        368,
        373,
        3,
        68,
        34,
        0,
        369,
        373,
        3,
        70,
        35,
        0,
        370,
        373,
        3,
        72,
        36,
        0,
        371,
        373,
        3,
        74,
        37,
        0,
        372,
        366,
        1,
        0,
        0,
        0,
        372,
        367,
        1,
        0,
        0,
        0,
        372,
        368,
        1,
        0,
        0,
        0,
        372,
        369,
        1,
        0,
        0,
        0,
        372,
        370,
        1,
        0,
        0,
        0,
        372,
        371,
        1,
        0,
        0,
        0,
        373,
        77,
        1,
        0,
        0,
        0,
        374,
        375,
        5,
        14,
        0,
        0,
        375,
        79,
        1,
        0,
        0,
        0,
        376,
        377,
        7,
        1,
        0,
        0,
        377,
        81,
        1,
        0,
        0,
        0,
        378,
        379,
        3,
        84,
        42,
        0,
        379,
        380,
        5,
        91,
        0,
        0,
        380,
        381,
        3,
        86,
        43,
        0,
        381,
        83,
        1,
        0,
        0,
        0,
        382,
        383,
        7,
        2,
        0,
        0,
        383,
        85,
        1,
        0,
        0,
        0,
        384,
        385,
        7,
        3,
        0,
        0,
        385,
        87,
        1,
        0,
        0,
        0,
        386,
        391,
        3,
        82,
        41,
        0,
        387,
        388,
        5,
        89,
        0,
        0,
        388,
        390,
        3,
        82,
        41,
        0,
        389,
        387,
        1,
        0,
        0,
        0,
        390,
        393,
        1,
        0,
        0,
        0,
        391,
        389,
        1,
        0,
        0,
        0,
        391,
        392,
        1,
        0,
        0,
        0,
        392,
        89,
        1,
        0,
        0,
        0,
        393,
        391,
        1,
        0,
        0,
        0,
        29,
        94,
        110,
        123,
        132,
        139,
        144,
        162,
        236,
        241,
        249,
        254,
        260,
        264,
        268,
        274,
        278,
        284,
        288,
        292,
        312,
        316,
        324,
        332,
        340,
        348,
        352,
        360,
        372,
        391,
    ]


class TestFileParser(Parser):

    grammarFileName = "TestFileParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [DFA(ds, i) for i, ds in enumerate(atn.decisionToState)]

    sharedContextCache = PredictionContextCache()

    literalNames = [
        "<INVALID>",
        "'### SUBSTRAIT_SCALAR_TEST:'",
        "<INVALID>",
        "'### SUBSTRAIT_INCLUDE:'",
        "<INVALID>",
        "'<!ERROR>'",
        "'<!UNDEFINED>'",
        "'overlfow'",
        "'rounding'",
        "'ERROR'",
        "'SATURATE'",
        "'SILENT'",
        "'TIE_TO_EVEN'",
        "'NAN'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'P'",
        "'T'",
        "'Y'",
        "'M'",
        "'D'",
        "'H'",
        "'S'",
        "'F'",
        "<INVALID>",
        "<INVALID>",
        "'null'",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "<INVALID>",
        "'::'",
        "<INVALID>",
        "'<'",
        "'>'",
        "'('",
        "')'",
        "'['",
        "']'",
        "','",
        "'='",
        "':'",
        "'?'",
        "'#'",
        "'.'",
    ]

    symbolicNames = [
        "<INVALID>",
        "SUBSTRAIT_SCALAR_TEST",
        "FORMAT_VERSION",
        "SUBSTRAIT_INCLUDE",
        "DESCRIPTION_LINE",
        "ERROR_RESULT",
        "UNDEFINED_RESULT",
        "OVERFLOW",
        "ROUNDING",
        "ERROR",
        "SATURATE",
        "SILENT",
        "TIE_TO_EVEN",
        "NAN",
        "INTEGER_LITERAL",
        "DECIMAL_LITERAL",
        "FLOAT_LITERAL",
        "BOOLEAN_LITERAL",
        "TIMESTAMP_TZ_LITERAL",
        "TIMESTAMP_LITERAL",
        "TIME_LITERAL",
        "DATE_LITERAL",
        "PERIOD_PREFIX",
        "TIME_PREFIX",
        "YEAR_SUFFIX",
        "M_SUFFIX",
        "DAY_SUFFIX",
        "HOUR_SUFFIX",
        "SECOND_SUFFIX",
        "FRACTIONAL_SECOND_SUFFIX",
        "INTERVAL_YEAR_LITERAL",
        "INTERVAL_DAY_LITERAL",
        "NULL_LITERAL",
        "STRING_LITERAL",
        "LineComment",
        "BlockComment",
        "Whitespace",
        "If",
        "Then",
        "Else",
        "Boolean",
        "I8",
        "I16",
        "I32",
        "I64",
        "FP32",
        "FP64",
        "String",
        "Binary",
        "Timestamp",
        "TimestampTZ",
        "Date",
        "Time",
        "IntervalYear",
        "IntervalDay",
        "UUID",
        "Decimal",
        "PrecisionTimestamp",
        "PrecisionTimestampTZ",
        "FixedChar",
        "VarChar",
        "FixedBinary",
        "Struct",
        "NStruct",
        "List",
        "Map",
        "ANY",
        "UserDefined",
        "Bool",
        "Str",
        "VBin",
        "Ts",
        "TsTZ",
        "IYear",
        "IDay",
        "Dec",
        "PTs",
        "PTsTZ",
        "FChar",
        "VChar",
        "FBin",
        "DOUBLE_COLON",
        "IDENTIFIER",
        "O_ANGLE_BRACKET",
        "C_ANGLE_BRACKET",
        "OPAREN",
        "CPAREN",
        "OBRACKET",
        "CBRACKET",
        "COMMA",
        "EQ",
        "COLON",
        "QMARK",
        "HASH",
        "DOT",
    ]

    RULE_doc = 0
    RULE_header = 1
    RULE_version = 2
    RULE_include = 3
    RULE_testGroupDescription = 4
    RULE_testCase = 5
    RULE_testGroup = 6
    RULE_arguments = 7
    RULE_result = 8
    RULE_argument = 9
    RULE_numericLiteral = 10
    RULE_nullArg = 11
    RULE_i8Arg = 12
    RULE_i16Arg = 13
    RULE_i32Arg = 14
    RULE_i64Arg = 15
    RULE_fp32Arg = 16
    RULE_fp64Arg = 17
    RULE_decimalArg = 18
    RULE_booleanArg = 19
    RULE_stringArg = 20
    RULE_dateArg = 21
    RULE_timeArg = 22
    RULE_timestampArg = 23
    RULE_timestampTzArg = 24
    RULE_intervalYearArg = 25
    RULE_intervalDayArg = 26
    RULE_intervalYearLiteral = 27
    RULE_intervalDayLiteral = 28
    RULE_timeInterval = 29
    RULE_datatype = 30
    RULE_scalarType = 31
    RULE_fixedCharType = 32
    RULE_varCharType = 33
    RULE_fixedBinaryType = 34
    RULE_decimalType = 35
    RULE_precisionTimestampType = 36
    RULE_precisionTimestampTZType = 37
    RULE_parameterizedType = 38
    RULE_numericParameter = 39
    RULE_substraitError = 40
    RULE_func_option = 41
    RULE_option_name = 42
    RULE_option_value = 43
    RULE_func_options = 44

    ruleNames = [
        "doc",
        "header",
        "version",
        "include",
        "testGroupDescription",
        "testCase",
        "testGroup",
        "arguments",
        "result",
        "argument",
        "numericLiteral",
        "nullArg",
        "i8Arg",
        "i16Arg",
        "i32Arg",
        "i64Arg",
        "fp32Arg",
        "fp64Arg",
        "decimalArg",
        "booleanArg",
        "stringArg",
        "dateArg",
        "timeArg",
        "timestampArg",
        "timestampTzArg",
        "intervalYearArg",
        "intervalDayArg",
        "intervalYearLiteral",
        "intervalDayLiteral",
        "timeInterval",
        "datatype",
        "scalarType",
        "fixedCharType",
        "varCharType",
        "fixedBinaryType",
        "decimalType",
        "precisionTimestampType",
        "precisionTimestampTZType",
        "parameterizedType",
        "numericParameter",
        "substraitError",
        "func_option",
        "option_name",
        "option_value",
        "func_options",
    ]

    EOF = Token.EOF
    SUBSTRAIT_SCALAR_TEST = 1
    FORMAT_VERSION = 2
    SUBSTRAIT_INCLUDE = 3
    DESCRIPTION_LINE = 4
    ERROR_RESULT = 5
    UNDEFINED_RESULT = 6
    OVERFLOW = 7
    ROUNDING = 8
    ERROR = 9
    SATURATE = 10
    SILENT = 11
    TIE_TO_EVEN = 12
    NAN = 13
    INTEGER_LITERAL = 14
    DECIMAL_LITERAL = 15
    FLOAT_LITERAL = 16
    BOOLEAN_LITERAL = 17
    TIMESTAMP_TZ_LITERAL = 18
    TIMESTAMP_LITERAL = 19
    TIME_LITERAL = 20
    DATE_LITERAL = 21
    PERIOD_PREFIX = 22
    TIME_PREFIX = 23
    YEAR_SUFFIX = 24
    M_SUFFIX = 25
    DAY_SUFFIX = 26
    HOUR_SUFFIX = 27
    SECOND_SUFFIX = 28
    FRACTIONAL_SECOND_SUFFIX = 29
    INTERVAL_YEAR_LITERAL = 30
    INTERVAL_DAY_LITERAL = 31
    NULL_LITERAL = 32
    STRING_LITERAL = 33
    LineComment = 34
    BlockComment = 35
    Whitespace = 36
    If = 37
    Then = 38
    Else = 39
    Boolean = 40
    I8 = 41
    I16 = 42
    I32 = 43
    I64 = 44
    FP32 = 45
    FP64 = 46
    String = 47
    Binary = 48
    Timestamp = 49
    TimestampTZ = 50
    Date = 51
    Time = 52
    IntervalYear = 53
    IntervalDay = 54
    UUID = 55
    Decimal = 56
    PrecisionTimestamp = 57
    PrecisionTimestampTZ = 58
    FixedChar = 59
    VarChar = 60
    FixedBinary = 61
    Struct = 62
    NStruct = 63
    List = 64
    Map = 65
    ANY = 66
    UserDefined = 67
    Bool = 68
    Str = 69
    VBin = 70
    Ts = 71
    TsTZ = 72
    IYear = 73
    IDay = 74
    Dec = 75
    PTs = 76
    PTsTZ = 77
    FChar = 78
    VChar = 79
    FBin = 80
    DOUBLE_COLON = 81
    IDENTIFIER = 82
    O_ANGLE_BRACKET = 83
    C_ANGLE_BRACKET = 84
    OPAREN = 85
    CPAREN = 86
    OBRACKET = 87
    CBRACKET = 88
    COMMA = 89
    EQ = 90
    COLON = 91
    QMARK = 92
    HASH = 93
    DOT = 94

    def __init__(self, input: TokenStream, output: TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(
            self, self.atn, self.decisionsToDFA, self.sharedContextCache
        )
        self._predicates = None

    class DocContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def header(self):
            return self.getTypedRuleContext(TestFileParser.HeaderContext, 0)

        def EOF(self):
            return self.getToken(TestFileParser.EOF, 0)

        def testGroup(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(TestFileParser.TestGroupContext)
            else:
                return self.getTypedRuleContext(TestFileParser.TestGroupContext, i)

        def getRuleIndex(self):
            return TestFileParser.RULE_doc

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDoc"):
                listener.enterDoc(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDoc"):
                listener.exitDoc(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDoc"):
                return visitor.visitDoc(self)
            else:
                return visitor.visitChildren(self)

    def doc(self):

        localctx = TestFileParser.DocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_doc)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 90
            self.header()
            self.state = 92
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 91
                self.testGroup()
                self.state = 94
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 4):
                    break

            self.state = 96
            self.match(TestFileParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HeaderContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def version(self):
            return self.getTypedRuleContext(TestFileParser.VersionContext, 0)

        def include(self):
            return self.getTypedRuleContext(TestFileParser.IncludeContext, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_header

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterHeader"):
                listener.enterHeader(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitHeader"):
                listener.exitHeader(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitHeader"):
                return visitor.visitHeader(self)
            else:
                return visitor.visitChildren(self)

    def header(self):

        localctx = TestFileParser.HeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_header)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 98
            self.version()
            self.state = 99
            self.include()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSTRAIT_SCALAR_TEST(self):
            return self.getToken(TestFileParser.SUBSTRAIT_SCALAR_TEST, 0)

        def FORMAT_VERSION(self):
            return self.getToken(TestFileParser.FORMAT_VERSION, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_version

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVersion"):
                listener.enterVersion(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVersion"):
                listener.exitVersion(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVersion"):
                return visitor.visitVersion(self)
            else:
                return visitor.visitChildren(self)

    def version(self):

        localctx = TestFileParser.VersionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 101
            self.match(TestFileParser.SUBSTRAIT_SCALAR_TEST)
            self.state = 102
            self.match(TestFileParser.FORMAT_VERSION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IncludeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBSTRAIT_INCLUDE(self):
            return self.getToken(TestFileParser.SUBSTRAIT_INCLUDE, 0)

        def STRING_LITERAL(self, i: int = None):
            if i is None:
                return self.getTokens(TestFileParser.STRING_LITERAL)
            else:
                return self.getToken(TestFileParser.STRING_LITERAL, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(TestFileParser.COMMA)
            else:
                return self.getToken(TestFileParser.COMMA, i)

        def getRuleIndex(self):
            return TestFileParser.RULE_include

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterInclude"):
                listener.enterInclude(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitInclude"):
                listener.exitInclude(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitInclude"):
                return visitor.visitInclude(self)
            else:
                return visitor.visitChildren(self)

    def include(self):

        localctx = TestFileParser.IncludeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_include)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 104
            self.match(TestFileParser.SUBSTRAIT_INCLUDE)
            self.state = 105
            self.match(TestFileParser.STRING_LITERAL)
            self.state = 110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 89:
                self.state = 106
                self.match(TestFileParser.COMMA)
                self.state = 107
                self.match(TestFileParser.STRING_LITERAL)
                self.state = 112
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestGroupDescriptionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DESCRIPTION_LINE(self):
            return self.getToken(TestFileParser.DESCRIPTION_LINE, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_testGroupDescription

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTestGroupDescription"):
                listener.enterTestGroupDescription(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTestGroupDescription"):
                listener.exitTestGroupDescription(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTestGroupDescription"):
                return visitor.visitTestGroupDescription(self)
            else:
                return visitor.visitChildren(self)

    def testGroupDescription(self):

        localctx = TestFileParser.TestGroupDescriptionContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 8, self.RULE_testGroupDescription)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 113
            self.match(TestFileParser.DESCRIPTION_LINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestCaseContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.functionName = None  # Token

        def OPAREN(self):
            return self.getToken(TestFileParser.OPAREN, 0)

        def arguments(self):
            return self.getTypedRuleContext(TestFileParser.ArgumentsContext, 0)

        def CPAREN(self):
            return self.getToken(TestFileParser.CPAREN, 0)

        def EQ(self):
            return self.getToken(TestFileParser.EQ, 0)

        def result(self):
            return self.getTypedRuleContext(TestFileParser.ResultContext, 0)

        def IDENTIFIER(self):
            return self.getToken(TestFileParser.IDENTIFIER, 0)

        def OBRACKET(self):
            return self.getToken(TestFileParser.OBRACKET, 0)

        def func_options(self):
            return self.getTypedRuleContext(TestFileParser.Func_optionsContext, 0)

        def CBRACKET(self):
            return self.getToken(TestFileParser.CBRACKET, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_testCase

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTestCase"):
                listener.enterTestCase(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTestCase"):
                listener.exitTestCase(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTestCase"):
                return visitor.visitTestCase(self)
            else:
                return visitor.visitChildren(self)

    def testCase(self):

        localctx = TestFileParser.TestCaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_testCase)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 115
            localctx.functionName = self.match(TestFileParser.IDENTIFIER)
            self.state = 116
            self.match(TestFileParser.OPAREN)
            self.state = 117
            self.arguments()
            self.state = 118
            self.match(TestFileParser.CPAREN)
            self.state = 123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 87:
                self.state = 119
                self.match(TestFileParser.OBRACKET)
                self.state = 120
                self.func_options()
                self.state = 121
                self.match(TestFileParser.CBRACKET)

            self.state = 125
            self.match(TestFileParser.EQ)
            self.state = 126
            self.result()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TestGroupContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testGroupDescription(self):
            return self.getTypedRuleContext(
                TestFileParser.TestGroupDescriptionContext, 0
            )

        def testCase(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(TestFileParser.TestCaseContext)
            else:
                return self.getTypedRuleContext(TestFileParser.TestCaseContext, i)

        def getRuleIndex(self):
            return TestFileParser.RULE_testGroup

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTestGroup"):
                listener.enterTestGroup(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTestGroup"):
                listener.exitTestGroup(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTestGroup"):
                return visitor.visitTestGroup(self)
            else:
                return visitor.visitChildren(self)

    def testGroup(self):

        localctx = TestFileParser.TestGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_testGroup)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 128
            self.testGroupDescription()
            self.state = 130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 129
                self.testCase()
                self.state = 132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la == 82):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(TestFileParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(TestFileParser.ArgumentContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(TestFileParser.COMMA)
            else:
                return self.getToken(TestFileParser.COMMA, i)

        def getRuleIndex(self):
            return TestFileParser.RULE_arguments

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArguments"):
                listener.enterArguments(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArguments"):
                listener.exitArguments(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArguments"):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)

    def arguments(self):

        localctx = TestFileParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_arguments)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 134
            self.argument()
            self.state = 139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 89:
                self.state = 135
                self.match(TestFileParser.COMMA)
                self.state = 136
                self.argument()
                self.state = 141
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResultContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self):
            return self.getTypedRuleContext(TestFileParser.ArgumentContext, 0)

        def substraitError(self):
            return self.getTypedRuleContext(TestFileParser.SubstraitErrorContext, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_result

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterResult"):
                listener.enterResult(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitResult"):
                listener.exitResult(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitResult"):
                return visitor.visitResult(self)
            else:
                return visitor.visitChildren(self)

    def result(self):

        localctx = TestFileParser.ResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_result)
        try:
            self.state = 144
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 15, 16, 17, 18, 19, 20, 21, 30, 31, 32, 33]:
                self.enterOuterAlt(localctx, 1)
                self.state = 142
                self.argument()
                pass
            elif token in [5, 6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 143
                self.substraitError()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nullArg(self):
            return self.getTypedRuleContext(TestFileParser.NullArgContext, 0)

        def i8Arg(self):
            return self.getTypedRuleContext(TestFileParser.I8ArgContext, 0)

        def i16Arg(self):
            return self.getTypedRuleContext(TestFileParser.I16ArgContext, 0)

        def i32Arg(self):
            return self.getTypedRuleContext(TestFileParser.I32ArgContext, 0)

        def i64Arg(self):
            return self.getTypedRuleContext(TestFileParser.I64ArgContext, 0)

        def fp32Arg(self):
            return self.getTypedRuleContext(TestFileParser.Fp32ArgContext, 0)

        def fp64Arg(self):
            return self.getTypedRuleContext(TestFileParser.Fp64ArgContext, 0)

        def booleanArg(self):
            return self.getTypedRuleContext(TestFileParser.BooleanArgContext, 0)

        def stringArg(self):
            return self.getTypedRuleContext(TestFileParser.StringArgContext, 0)

        def decimalArg(self):
            return self.getTypedRuleContext(TestFileParser.DecimalArgContext, 0)

        def dateArg(self):
            return self.getTypedRuleContext(TestFileParser.DateArgContext, 0)

        def timeArg(self):
            return self.getTypedRuleContext(TestFileParser.TimeArgContext, 0)

        def timestampArg(self):
            return self.getTypedRuleContext(TestFileParser.TimestampArgContext, 0)

        def timestampTzArg(self):
            return self.getTypedRuleContext(TestFileParser.TimestampTzArgContext, 0)

        def intervalYearArg(self):
            return self.getTypedRuleContext(TestFileParser.IntervalYearArgContext, 0)

        def intervalDayArg(self):
            return self.getTypedRuleContext(TestFileParser.IntervalDayArgContext, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_argument

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterArgument"):
                listener.enterArgument(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitArgument"):
                listener.exitArgument(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitArgument"):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)

    def argument(self):

        localctx = TestFileParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_argument)
        try:
            self.state = 162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 6, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 146
                self.nullArg()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 147
                self.i8Arg()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 148
                self.i16Arg()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 149
                self.i32Arg()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 150
                self.i64Arg()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 151
                self.fp32Arg()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 152
                self.fp64Arg()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 153
                self.booleanArg()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 154
                self.stringArg()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 155
                self.decimalArg()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 156
                self.dateArg()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 157
                self.timeArg()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 158
                self.timestampArg()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 159
                self.timestampTzArg()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 160
                self.intervalYearArg()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 161
                self.intervalDayArg()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(TestFileParser.DECIMAL_LITERAL, 0)

        def INTEGER_LITERAL(self):
            return self.getToken(TestFileParser.INTEGER_LITERAL, 0)

        def FLOAT_LITERAL(self):
            return self.getToken(TestFileParser.FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_numericLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNumericLiteral"):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNumericLiteral"):
                listener.exitNumericLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNumericLiteral"):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)

    def numericLiteral(self):

        localctx = TestFileParser.NumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_numericLiteral)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 164
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 114688) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NullArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(TestFileParser.NULL_LITERAL, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TestFileParser.DOUBLE_COLON, 0)

        def datatype(self):
            return self.getTypedRuleContext(TestFileParser.DatatypeContext, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_nullArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterNullArg"):
                listener.enterNullArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitNullArg"):
                listener.exitNullArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitNullArg"):
                return visitor.visitNullArg(self)
            else:
                return visitor.visitChildren(self)

    def nullArg(self):

        localctx = TestFileParser.NullArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_nullArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 166
            self.match(TestFileParser.NULL_LITERAL)
            self.state = 167
            self.match(TestFileParser.DOUBLE_COLON)
            self.state = 168
            self.datatype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class I8ArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_LITERAL(self):
            return self.getToken(TestFileParser.INTEGER_LITERAL, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TestFileParser.DOUBLE_COLON, 0)

        def I8(self):
            return self.getToken(TestFileParser.I8, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_i8Arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterI8Arg"):
                listener.enterI8Arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitI8Arg"):
                listener.exitI8Arg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitI8Arg"):
                return visitor.visitI8Arg(self)
            else:
                return visitor.visitChildren(self)

    def i8Arg(self):

        localctx = TestFileParser.I8ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_i8Arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 170
            self.match(TestFileParser.INTEGER_LITERAL)
            self.state = 171
            self.match(TestFileParser.DOUBLE_COLON)
            self.state = 172
            self.match(TestFileParser.I8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class I16ArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_LITERAL(self):
            return self.getToken(TestFileParser.INTEGER_LITERAL, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TestFileParser.DOUBLE_COLON, 0)

        def I16(self):
            return self.getToken(TestFileParser.I16, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_i16Arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterI16Arg"):
                listener.enterI16Arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitI16Arg"):
                listener.exitI16Arg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitI16Arg"):
                return visitor.visitI16Arg(self)
            else:
                return visitor.visitChildren(self)

    def i16Arg(self):

        localctx = TestFileParser.I16ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_i16Arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self.match(TestFileParser.INTEGER_LITERAL)
            self.state = 175
            self.match(TestFileParser.DOUBLE_COLON)
            self.state = 176
            self.match(TestFileParser.I16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class I32ArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_LITERAL(self):
            return self.getToken(TestFileParser.INTEGER_LITERAL, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TestFileParser.DOUBLE_COLON, 0)

        def I32(self):
            return self.getToken(TestFileParser.I32, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_i32Arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterI32Arg"):
                listener.enterI32Arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitI32Arg"):
                listener.exitI32Arg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitI32Arg"):
                return visitor.visitI32Arg(self)
            else:
                return visitor.visitChildren(self)

    def i32Arg(self):

        localctx = TestFileParser.I32ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_i32Arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 178
            self.match(TestFileParser.INTEGER_LITERAL)
            self.state = 179
            self.match(TestFileParser.DOUBLE_COLON)
            self.state = 180
            self.match(TestFileParser.I32)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class I64ArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_LITERAL(self):
            return self.getToken(TestFileParser.INTEGER_LITERAL, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TestFileParser.DOUBLE_COLON, 0)

        def I64(self):
            return self.getToken(TestFileParser.I64, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_i64Arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterI64Arg"):
                listener.enterI64Arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitI64Arg"):
                listener.exitI64Arg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitI64Arg"):
                return visitor.visitI64Arg(self)
            else:
                return visitor.visitChildren(self)

    def i64Arg(self):

        localctx = TestFileParser.I64ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_i64Arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 182
            self.match(TestFileParser.INTEGER_LITERAL)
            self.state = 183
            self.match(TestFileParser.DOUBLE_COLON)
            self.state = 184
            self.match(TestFileParser.I64)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fp32ArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericLiteral(self):
            return self.getTypedRuleContext(TestFileParser.NumericLiteralContext, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TestFileParser.DOUBLE_COLON, 0)

        def FP32(self):
            return self.getToken(TestFileParser.FP32, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_fp32Arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFp32Arg"):
                listener.enterFp32Arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFp32Arg"):
                listener.exitFp32Arg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFp32Arg"):
                return visitor.visitFp32Arg(self)
            else:
                return visitor.visitChildren(self)

    def fp32Arg(self):

        localctx = TestFileParser.Fp32ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_fp32Arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self.numericLiteral()
            self.state = 187
            self.match(TestFileParser.DOUBLE_COLON)
            self.state = 188
            self.match(TestFileParser.FP32)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fp64ArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericLiteral(self):
            return self.getTypedRuleContext(TestFileParser.NumericLiteralContext, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TestFileParser.DOUBLE_COLON, 0)

        def FP64(self):
            return self.getToken(TestFileParser.FP64, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_fp64Arg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFp64Arg"):
                listener.enterFp64Arg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFp64Arg"):
                listener.exitFp64Arg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFp64Arg"):
                return visitor.visitFp64Arg(self)
            else:
                return visitor.visitChildren(self)

    def fp64Arg(self):

        localctx = TestFileParser.Fp64ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_fp64Arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self.numericLiteral()
            self.state = 191
            self.match(TestFileParser.DOUBLE_COLON)
            self.state = 192
            self.match(TestFileParser.FP64)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecimalArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericLiteral(self):
            return self.getTypedRuleContext(TestFileParser.NumericLiteralContext, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TestFileParser.DOUBLE_COLON, 0)

        def decimalType(self):
            return self.getTypedRuleContext(TestFileParser.DecimalTypeContext, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_decimalArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDecimalArg"):
                listener.enterDecimalArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDecimalArg"):
                listener.exitDecimalArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDecimalArg"):
                return visitor.visitDecimalArg(self)
            else:
                return visitor.visitChildren(self)

    def decimalArg(self):

        localctx = TestFileParser.DecimalArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_decimalArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            self.numericLiteral()
            self.state = 195
            self.match(TestFileParser.DOUBLE_COLON)
            self.state = 196
            self.decimalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN_LITERAL(self):
            return self.getToken(TestFileParser.BOOLEAN_LITERAL, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TestFileParser.DOUBLE_COLON, 0)

        def Bool(self):
            return self.getToken(TestFileParser.Bool, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_booleanArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBooleanArg"):
                listener.enterBooleanArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBooleanArg"):
                listener.exitBooleanArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBooleanArg"):
                return visitor.visitBooleanArg(self)
            else:
                return visitor.visitChildren(self)

    def booleanArg(self):

        localctx = TestFileParser.BooleanArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_booleanArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.match(TestFileParser.BOOLEAN_LITERAL)
            self.state = 199
            self.match(TestFileParser.DOUBLE_COLON)
            self.state = 200
            self.match(TestFileParser.Bool)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(TestFileParser.STRING_LITERAL, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TestFileParser.DOUBLE_COLON, 0)

        def Str(self):
            return self.getToken(TestFileParser.Str, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_stringArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterStringArg"):
                listener.enterStringArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitStringArg"):
                listener.exitStringArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitStringArg"):
                return visitor.visitStringArg(self)
            else:
                return visitor.visitChildren(self)

    def stringArg(self):

        localctx = TestFileParser.StringArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_stringArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self.match(TestFileParser.STRING_LITERAL)
            self.state = 203
            self.match(TestFileParser.DOUBLE_COLON)
            self.state = 204
            self.match(TestFileParser.Str)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DateArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_LITERAL(self):
            return self.getToken(TestFileParser.DATE_LITERAL, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TestFileParser.DOUBLE_COLON, 0)

        def Date(self):
            return self.getToken(TestFileParser.Date, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_dateArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDateArg"):
                listener.enterDateArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDateArg"):
                listener.exitDateArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDateArg"):
                return visitor.visitDateArg(self)
            else:
                return visitor.visitChildren(self)

    def dateArg(self):

        localctx = TestFileParser.DateArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_dateArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self.match(TestFileParser.DATE_LITERAL)
            self.state = 207
            self.match(TestFileParser.DOUBLE_COLON)
            self.state = 208
            self.match(TestFileParser.Date)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIME_LITERAL(self):
            return self.getToken(TestFileParser.TIME_LITERAL, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TestFileParser.DOUBLE_COLON, 0)

        def Time(self):
            return self.getToken(TestFileParser.Time, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_timeArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimeArg"):
                listener.enterTimeArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimeArg"):
                listener.exitTimeArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeArg"):
                return visitor.visitTimeArg(self)
            else:
                return visitor.visitChildren(self)

    def timeArg(self):

        localctx = TestFileParser.TimeArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_timeArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self.match(TestFileParser.TIME_LITERAL)
            self.state = 211
            self.match(TestFileParser.DOUBLE_COLON)
            self.state = 212
            self.match(TestFileParser.Time)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimestampArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP_LITERAL(self):
            return self.getToken(TestFileParser.TIMESTAMP_LITERAL, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TestFileParser.DOUBLE_COLON, 0)

        def Ts(self):
            return self.getToken(TestFileParser.Ts, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_timestampArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimestampArg"):
                listener.enterTimestampArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimestampArg"):
                listener.exitTimestampArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimestampArg"):
                return visitor.visitTimestampArg(self)
            else:
                return visitor.visitChildren(self)

    def timestampArg(self):

        localctx = TestFileParser.TimestampArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_timestampArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.match(TestFileParser.TIMESTAMP_LITERAL)
            self.state = 215
            self.match(TestFileParser.DOUBLE_COLON)
            self.state = 216
            self.match(TestFileParser.Ts)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimestampTzArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TIMESTAMP_TZ_LITERAL(self):
            return self.getToken(TestFileParser.TIMESTAMP_TZ_LITERAL, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TestFileParser.DOUBLE_COLON, 0)

        def TsTZ(self):
            return self.getToken(TestFileParser.TsTZ, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_timestampTzArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimestampTzArg"):
                listener.enterTimestampTzArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimestampTzArg"):
                listener.exitTimestampTzArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimestampTzArg"):
                return visitor.visitTimestampTzArg(self)
            else:
                return visitor.visitChildren(self)

    def timestampTzArg(self):

        localctx = TestFileParser.TimestampTzArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_timestampTzArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.match(TestFileParser.TIMESTAMP_TZ_LITERAL)
            self.state = 219
            self.match(TestFileParser.DOUBLE_COLON)
            self.state = 220
            self.match(TestFileParser.TsTZ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalYearArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL_YEAR_LITERAL(self):
            return self.getToken(TestFileParser.INTERVAL_YEAR_LITERAL, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TestFileParser.DOUBLE_COLON, 0)

        def IYear(self):
            return self.getToken(TestFileParser.IYear, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_intervalYearArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalYearArg"):
                listener.enterIntervalYearArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalYearArg"):
                listener.exitIntervalYearArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntervalYearArg"):
                return visitor.visitIntervalYearArg(self)
            else:
                return visitor.visitChildren(self)

    def intervalYearArg(self):

        localctx = TestFileParser.IntervalYearArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_intervalYearArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(TestFileParser.INTERVAL_YEAR_LITERAL)
            self.state = 223
            self.match(TestFileParser.DOUBLE_COLON)
            self.state = 224
            self.match(TestFileParser.IYear)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalDayArgContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL_DAY_LITERAL(self):
            return self.getToken(TestFileParser.INTERVAL_DAY_LITERAL, 0)

        def DOUBLE_COLON(self):
            return self.getToken(TestFileParser.DOUBLE_COLON, 0)

        def IDay(self):
            return self.getToken(TestFileParser.IDay, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_intervalDayArg

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalDayArg"):
                listener.enterIntervalDayArg(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalDayArg"):
                listener.exitIntervalDayArg(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntervalDayArg"):
                return visitor.visitIntervalDayArg(self)
            else:
                return visitor.visitChildren(self)

    def intervalDayArg(self):

        localctx = TestFileParser.IntervalDayArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_intervalDayArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.match(TestFileParser.INTERVAL_DAY_LITERAL)
            self.state = 227
            self.match(TestFileParser.DOUBLE_COLON)
            self.state = 228
            self.match(TestFileParser.IDay)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalYearLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.years = None  # Token
            self.months = None  # Token

        def PERIOD_PREFIX(self):
            return self.getToken(TestFileParser.PERIOD_PREFIX, 0)

        def YEAR_SUFFIX(self):
            return self.getToken(TestFileParser.YEAR_SUFFIX, 0)

        def INTEGER_LITERAL(self, i: int = None):
            if i is None:
                return self.getTokens(TestFileParser.INTEGER_LITERAL)
            else:
                return self.getToken(TestFileParser.INTEGER_LITERAL, i)

        def M_SUFFIX(self):
            return self.getToken(TestFileParser.M_SUFFIX, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_intervalYearLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalYearLiteral"):
                listener.enterIntervalYearLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalYearLiteral"):
                listener.exitIntervalYearLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntervalYearLiteral"):
                return visitor.visitIntervalYearLiteral(self)
            else:
                return visitor.visitChildren(self)

    def intervalYearLiteral(self):

        localctx = TestFileParser.IntervalYearLiteralContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 54, self.RULE_intervalYearLiteral)
        self._la = 0  # Token type
        try:
            self.state = 241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 8, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 230
                self.match(TestFileParser.PERIOD_PREFIX)

                self.state = 231
                localctx.years = self.match(TestFileParser.INTEGER_LITERAL)
                self.state = 232
                self.match(TestFileParser.YEAR_SUFFIX)
                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 14:
                    self.state = 234
                    localctx.months = self.match(TestFileParser.INTEGER_LITERAL)
                    self.state = 235
                    self.match(TestFileParser.M_SUFFIX)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 238
                self.match(TestFileParser.PERIOD_PREFIX)

                self.state = 239
                localctx.months = self.match(TestFileParser.INTEGER_LITERAL)
                self.state = 240
                self.match(TestFileParser.M_SUFFIX)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalDayLiteralContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.days = None  # Token

        def PERIOD_PREFIX(self):
            return self.getToken(TestFileParser.PERIOD_PREFIX, 0)

        def DAY_SUFFIX(self):
            return self.getToken(TestFileParser.DAY_SUFFIX, 0)

        def INTEGER_LITERAL(self):
            return self.getToken(TestFileParser.INTEGER_LITERAL, 0)

        def TIME_PREFIX(self):
            return self.getToken(TestFileParser.TIME_PREFIX, 0)

        def timeInterval(self):
            return self.getTypedRuleContext(TestFileParser.TimeIntervalContext, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_intervalDayLiteral

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalDayLiteral"):
                listener.enterIntervalDayLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalDayLiteral"):
                listener.exitIntervalDayLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntervalDayLiteral"):
                return visitor.visitIntervalDayLiteral(self)
            else:
                return visitor.visitChildren(self)

    def intervalDayLiteral(self):

        localctx = TestFileParser.IntervalDayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_intervalDayLiteral)
        self._la = 0  # Token type
        try:
            self.state = 254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 10, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 243
                self.match(TestFileParser.PERIOD_PREFIX)

                self.state = 244
                localctx.days = self.match(TestFileParser.INTEGER_LITERAL)
                self.state = 245
                self.match(TestFileParser.DAY_SUFFIX)
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 23:
                    self.state = 247
                    self.match(TestFileParser.TIME_PREFIX)
                    self.state = 248
                    self.timeInterval()

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 251
                self.match(TestFileParser.PERIOD_PREFIX)
                self.state = 252
                self.match(TestFileParser.TIME_PREFIX)
                self.state = 253
                self.timeInterval()
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimeIntervalContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hours = None  # Token
            self.minutes = None  # Token
            self.seconds = None  # Token
            self.fractionalSeconds = None  # Token

        def HOUR_SUFFIX(self):
            return self.getToken(TestFileParser.HOUR_SUFFIX, 0)

        def INTEGER_LITERAL(self, i: int = None):
            if i is None:
                return self.getTokens(TestFileParser.INTEGER_LITERAL)
            else:
                return self.getToken(TestFileParser.INTEGER_LITERAL, i)

        def M_SUFFIX(self):
            return self.getToken(TestFileParser.M_SUFFIX, 0)

        def SECOND_SUFFIX(self):
            return self.getToken(TestFileParser.SECOND_SUFFIX, 0)

        def FRACTIONAL_SECOND_SUFFIX(self):
            return self.getToken(TestFileParser.FRACTIONAL_SECOND_SUFFIX, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_timeInterval

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimeInterval"):
                listener.enterTimeInterval(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimeInterval"):
                listener.exitTimeInterval(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimeInterval"):
                return visitor.visitTimeInterval(self)
            else:
                return visitor.visitChildren(self)

    def timeInterval(self):

        localctx = TestFileParser.TimeIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_timeInterval)
        self._la = 0  # Token type
        try:
            self.state = 288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input, 17, self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 256
                localctx.hours = self.match(TestFileParser.INTEGER_LITERAL)
                self.state = 257
                self.match(TestFileParser.HOUR_SUFFIX)
                self.state = 260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 11, self._ctx)
                if la_ == 1:
                    self.state = 258
                    localctx.minutes = self.match(TestFileParser.INTEGER_LITERAL)
                    self.state = 259
                    self.match(TestFileParser.M_SUFFIX)

                self.state = 264
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 12, self._ctx)
                if la_ == 1:
                    self.state = 262
                    localctx.seconds = self.match(TestFileParser.INTEGER_LITERAL)
                    self.state = 263
                    self.match(TestFileParser.SECOND_SUFFIX)

                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 14:
                    self.state = 266
                    localctx.fractionalSeconds = self.match(
                        TestFileParser.INTEGER_LITERAL
                    )
                    self.state = 267
                    self.match(TestFileParser.FRACTIONAL_SECOND_SUFFIX)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 270
                localctx.minutes = self.match(TestFileParser.INTEGER_LITERAL)
                self.state = 271
                self.match(TestFileParser.M_SUFFIX)
                self.state = 274
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input, 14, self._ctx)
                if la_ == 1:
                    self.state = 272
                    localctx.seconds = self.match(TestFileParser.INTEGER_LITERAL)
                    self.state = 273
                    self.match(TestFileParser.SECOND_SUFFIX)

                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 14:
                    self.state = 276
                    localctx.fractionalSeconds = self.match(
                        TestFileParser.INTEGER_LITERAL
                    )
                    self.state = 277
                    self.match(TestFileParser.FRACTIONAL_SECOND_SUFFIX)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 280
                localctx.seconds = self.match(TestFileParser.INTEGER_LITERAL)
                self.state = 281
                self.match(TestFileParser.SECOND_SUFFIX)
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la == 14:
                    self.state = 282
                    localctx.fractionalSeconds = self.match(
                        TestFileParser.INTEGER_LITERAL
                    )
                    self.state = 283
                    self.match(TestFileParser.FRACTIONAL_SECOND_SUFFIX)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 286
                localctx.fractionalSeconds = self.match(TestFileParser.INTEGER_LITERAL)
                self.state = 287
                self.match(TestFileParser.FRACTIONAL_SECOND_SUFFIX)
                pass

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DatatypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarType(self):
            return self.getTypedRuleContext(TestFileParser.ScalarTypeContext, 0)

        def parameterizedType(self):
            return self.getTypedRuleContext(TestFileParser.ParameterizedTypeContext, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_datatype

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDatatype"):
                listener.enterDatatype(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDatatype"):
                listener.exitDatatype(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDatatype"):
                return visitor.visitDatatype(self)
            else:
                return visitor.visitChildren(self)

    def datatype(self):

        localctx = TestFileParser.DatatypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_datatype)
        try:
            self.state = 292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [
                41,
                42,
                43,
                44,
                45,
                46,
                48,
                51,
                52,
                55,
                67,
                68,
                69,
                71,
                72,
                73,
                74,
            ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 290
                self.scalarType()
                pass
            elif token in [75, 76, 77, 78, 79, 80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 291
                self.parameterizedType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScalarTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return TestFileParser.RULE_scalarType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class DateContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Date(self):
            return self.getToken(TestFileParser.Date, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDate"):
                listener.enterDate(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDate"):
                listener.exitDate(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDate"):
                return visitor.visitDate(self)
            else:
                return visitor.visitChildren(self)

    class StringContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Str(self):
            return self.getToken(TestFileParser.Str, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterString"):
                listener.enterString(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitString"):
                listener.exitString(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitString"):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)

    class I64Context(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def I64(self):
            return self.getToken(TestFileParser.I64, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterI64"):
                listener.enterI64(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitI64"):
                listener.exitI64(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitI64"):
                return visitor.visitI64(self)
            else:
                return visitor.visitChildren(self)

    class UserDefinedContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UserDefined(self):
            return self.getToken(TestFileParser.UserDefined, 0)

        def IDENTIFIER(self):
            return self.getToken(TestFileParser.IDENTIFIER, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUserDefined"):
                listener.enterUserDefined(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUserDefined"):
                listener.exitUserDefined(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUserDefined"):
                return visitor.visitUserDefined(self)
            else:
                return visitor.visitChildren(self)

    class I32Context(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def I32(self):
            return self.getToken(TestFileParser.I32, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterI32"):
                listener.enterI32(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitI32"):
                listener.exitI32(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitI32"):
                return visitor.visitI32(self)
            else:
                return visitor.visitChildren(self)

    class IntervalYearContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IYear(self):
            return self.getToken(TestFileParser.IYear, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalYear"):
                listener.enterIntervalYear(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalYear"):
                listener.exitIntervalYear(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntervalYear"):
                return visitor.visitIntervalYear(self)
            else:
                return visitor.visitChildren(self)

    class UuidContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UUID(self):
            return self.getToken(TestFileParser.UUID, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterUuid"):
                listener.enterUuid(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitUuid"):
                listener.exitUuid(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitUuid"):
                return visitor.visitUuid(self)
            else:
                return visitor.visitChildren(self)

    class I8Context(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def I8(self):
            return self.getToken(TestFileParser.I8, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterI8"):
                listener.enterI8(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitI8"):
                listener.exitI8(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitI8"):
                return visitor.visitI8(self)
            else:
                return visitor.visitChildren(self)

    class I16Context(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def I16(self):
            return self.getToken(TestFileParser.I16, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterI16"):
                listener.enterI16(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitI16"):
                listener.exitI16(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitI16"):
                return visitor.visitI16(self)
            else:
                return visitor.visitChildren(self)

    class BinaryContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Binary(self):
            return self.getToken(TestFileParser.Binary, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBinary"):
                listener.enterBinary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBinary"):
                listener.exitBinary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBinary"):
                return visitor.visitBinary(self)
            else:
                return visitor.visitChildren(self)

    class IntervalDayContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDay(self):
            return self.getToken(TestFileParser.IDay, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntervalDay"):
                listener.enterIntervalDay(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntervalDay"):
                listener.exitIntervalDay(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntervalDay"):
                return visitor.visitIntervalDay(self)
            else:
                return visitor.visitChildren(self)

    class Fp64Context(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FP64(self):
            return self.getToken(TestFileParser.FP64, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFp64"):
                listener.enterFp64(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFp64"):
                listener.exitFp64(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFp64"):
                return visitor.visitFp64(self)
            else:
                return visitor.visitChildren(self)

    class Fp32Context(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FP32(self):
            return self.getToken(TestFileParser.FP32, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFp32"):
                listener.enterFp32(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFp32"):
                listener.exitFp32(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFp32"):
                return visitor.visitFp32(self)
            else:
                return visitor.visitChildren(self)

    class TimeContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Time(self):
            return self.getToken(TestFileParser.Time, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTime"):
                listener.enterTime(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTime"):
                listener.exitTime(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTime"):
                return visitor.visitTime(self)
            else:
                return visitor.visitChildren(self)

    class BooleanContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Bool(self):
            return self.getToken(TestFileParser.Bool, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterBoolean"):
                listener.enterBoolean(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitBoolean"):
                listener.exitBoolean(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitBoolean"):
                return visitor.visitBoolean(self)
            else:
                return visitor.visitChildren(self)

    class TimestampContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Ts(self):
            return self.getToken(TestFileParser.Ts, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimestamp"):
                listener.enterTimestamp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimestamp"):
                listener.exitTimestamp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimestamp"):
                return visitor.visitTimestamp(self)
            else:
                return visitor.visitChildren(self)

    class TimestampTzContext(ScalarTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.ScalarTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TsTZ(self):
            return self.getToken(TestFileParser.TsTZ, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterTimestampTz"):
                listener.enterTimestampTz(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitTimestampTz"):
                listener.exitTimestampTz(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitTimestampTz"):
                return visitor.visitTimestampTz(self)
            else:
                return visitor.visitChildren(self)

    def scalarType(self):

        localctx = TestFileParser.ScalarTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_scalarType)
        try:
            self.state = 312
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                localctx = TestFileParser.BooleanContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 294
                self.match(TestFileParser.Bool)
                pass
            elif token in [41]:
                localctx = TestFileParser.I8Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 295
                self.match(TestFileParser.I8)
                pass
            elif token in [42]:
                localctx = TestFileParser.I16Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 296
                self.match(TestFileParser.I16)
                pass
            elif token in [43]:
                localctx = TestFileParser.I32Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 297
                self.match(TestFileParser.I32)
                pass
            elif token in [44]:
                localctx = TestFileParser.I64Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 298
                self.match(TestFileParser.I64)
                pass
            elif token in [45]:
                localctx = TestFileParser.Fp32Context(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 299
                self.match(TestFileParser.FP32)
                pass
            elif token in [46]:
                localctx = TestFileParser.Fp64Context(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 300
                self.match(TestFileParser.FP64)
                pass
            elif token in [69]:
                localctx = TestFileParser.StringContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 301
                self.match(TestFileParser.Str)
                pass
            elif token in [48]:
                localctx = TestFileParser.BinaryContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 302
                self.match(TestFileParser.Binary)
                pass
            elif token in [71]:
                localctx = TestFileParser.TimestampContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 303
                self.match(TestFileParser.Ts)
                pass
            elif token in [72]:
                localctx = TestFileParser.TimestampTzContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 304
                self.match(TestFileParser.TsTZ)
                pass
            elif token in [51]:
                localctx = TestFileParser.DateContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 305
                self.match(TestFileParser.Date)
                pass
            elif token in [52]:
                localctx = TestFileParser.TimeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 306
                self.match(TestFileParser.Time)
                pass
            elif token in [74]:
                localctx = TestFileParser.IntervalDayContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 307
                self.match(TestFileParser.IDay)
                pass
            elif token in [73]:
                localctx = TestFileParser.IntervalYearContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 308
                self.match(TestFileParser.IYear)
                pass
            elif token in [55]:
                localctx = TestFileParser.UuidContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 309
                self.match(TestFileParser.UUID)
                pass
            elif token in [67]:
                localctx = TestFileParser.UserDefinedContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 310
                self.match(TestFileParser.UserDefined)
                self.state = 311
                self.match(TestFileParser.IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FixedCharTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return TestFileParser.RULE_fixedCharType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class FixedCharContext(FixedCharTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.FixedCharTypeContext
            super().__init__(parser)
            self.isnull = None  # Token
            self.len_ = None  # NumericParameterContext
            self.copyFrom(ctx)

        def FChar(self):
            return self.getToken(TestFileParser.FChar, 0)

        def O_ANGLE_BRACKET(self):
            return self.getToken(TestFileParser.O_ANGLE_BRACKET, 0)

        def C_ANGLE_BRACKET(self):
            return self.getToken(TestFileParser.C_ANGLE_BRACKET, 0)

        def numericParameter(self):
            return self.getTypedRuleContext(TestFileParser.NumericParameterContext, 0)

        def QMARK(self):
            return self.getToken(TestFileParser.QMARK, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFixedChar"):
                listener.enterFixedChar(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFixedChar"):
                listener.exitFixedChar(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFixedChar"):
                return visitor.visitFixedChar(self)
            else:
                return visitor.visitChildren(self)

    def fixedCharType(self):

        localctx = TestFileParser.FixedCharTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_fixedCharType)
        self._la = 0  # Token type
        try:
            localctx = TestFileParser.FixedCharContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(TestFileParser.FChar)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 92:
                self.state = 315
                localctx.isnull = self.match(TestFileParser.QMARK)

            self.state = 318
            self.match(TestFileParser.O_ANGLE_BRACKET)
            self.state = 319
            localctx.len_ = self.numericParameter()
            self.state = 320
            self.match(TestFileParser.C_ANGLE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarCharTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return TestFileParser.RULE_varCharType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class VarCharContext(VarCharTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.VarCharTypeContext
            super().__init__(parser)
            self.isnull = None  # Token
            self.len_ = None  # NumericParameterContext
            self.copyFrom(ctx)

        def VChar(self):
            return self.getToken(TestFileParser.VChar, 0)

        def O_ANGLE_BRACKET(self):
            return self.getToken(TestFileParser.O_ANGLE_BRACKET, 0)

        def C_ANGLE_BRACKET(self):
            return self.getToken(TestFileParser.C_ANGLE_BRACKET, 0)

        def numericParameter(self):
            return self.getTypedRuleContext(TestFileParser.NumericParameterContext, 0)

        def QMARK(self):
            return self.getToken(TestFileParser.QMARK, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterVarChar"):
                listener.enterVarChar(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitVarChar"):
                listener.exitVarChar(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitVarChar"):
                return visitor.visitVarChar(self)
            else:
                return visitor.visitChildren(self)

    def varCharType(self):

        localctx = TestFileParser.VarCharTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_varCharType)
        self._la = 0  # Token type
        try:
            localctx = TestFileParser.VarCharContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(TestFileParser.VChar)
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 92:
                self.state = 323
                localctx.isnull = self.match(TestFileParser.QMARK)

            self.state = 326
            self.match(TestFileParser.O_ANGLE_BRACKET)
            self.state = 327
            localctx.len_ = self.numericParameter()
            self.state = 328
            self.match(TestFileParser.C_ANGLE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FixedBinaryTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return TestFileParser.RULE_fixedBinaryType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class FixedBinaryContext(FixedBinaryTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.FixedBinaryTypeContext
            super().__init__(parser)
            self.isnull = None  # Token
            self.len_ = None  # NumericParameterContext
            self.copyFrom(ctx)

        def FBin(self):
            return self.getToken(TestFileParser.FBin, 0)

        def O_ANGLE_BRACKET(self):
            return self.getToken(TestFileParser.O_ANGLE_BRACKET, 0)

        def C_ANGLE_BRACKET(self):
            return self.getToken(TestFileParser.C_ANGLE_BRACKET, 0)

        def numericParameter(self):
            return self.getTypedRuleContext(TestFileParser.NumericParameterContext, 0)

        def QMARK(self):
            return self.getToken(TestFileParser.QMARK, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFixedBinary"):
                listener.enterFixedBinary(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFixedBinary"):
                listener.exitFixedBinary(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFixedBinary"):
                return visitor.visitFixedBinary(self)
            else:
                return visitor.visitChildren(self)

    def fixedBinaryType(self):

        localctx = TestFileParser.FixedBinaryTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_fixedBinaryType)
        self._la = 0  # Token type
        try:
            localctx = TestFileParser.FixedBinaryContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 330
            self.match(TestFileParser.FBin)
            self.state = 332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 92:
                self.state = 331
                localctx.isnull = self.match(TestFileParser.QMARK)

            self.state = 334
            self.match(TestFileParser.O_ANGLE_BRACKET)
            self.state = 335
            localctx.len_ = self.numericParameter()
            self.state = 336
            self.match(TestFileParser.C_ANGLE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecimalTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return TestFileParser.RULE_decimalType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class DecimalContext(DecimalTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.DecimalTypeContext
            super().__init__(parser)
            self.isnull = None  # Token
            self.precision = None  # NumericParameterContext
            self.scale = None  # NumericParameterContext
            self.copyFrom(ctx)

        def Dec(self):
            return self.getToken(TestFileParser.Dec, 0)

        def O_ANGLE_BRACKET(self):
            return self.getToken(TestFileParser.O_ANGLE_BRACKET, 0)

        def COMMA(self):
            return self.getToken(TestFileParser.COMMA, 0)

        def C_ANGLE_BRACKET(self):
            return self.getToken(TestFileParser.C_ANGLE_BRACKET, 0)

        def QMARK(self):
            return self.getToken(TestFileParser.QMARK, 0)

        def numericParameter(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(TestFileParser.NumericParameterContext)
            else:
                return self.getTypedRuleContext(
                    TestFileParser.NumericParameterContext, i
                )

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterDecimal"):
                listener.enterDecimal(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitDecimal"):
                listener.exitDecimal(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitDecimal"):
                return visitor.visitDecimal(self)
            else:
                return visitor.visitChildren(self)

    def decimalType(self):

        localctx = TestFileParser.DecimalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_decimalType)
        self._la = 0  # Token type
        try:
            localctx = TestFileParser.DecimalContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(TestFileParser.Dec)
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 92:
                self.state = 339
                localctx.isnull = self.match(TestFileParser.QMARK)

            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 83:
                self.state = 342
                self.match(TestFileParser.O_ANGLE_BRACKET)
                self.state = 343
                localctx.precision = self.numericParameter()
                self.state = 344
                self.match(TestFileParser.COMMA)
                self.state = 345
                localctx.scale = self.numericParameter()
                self.state = 346
                self.match(TestFileParser.C_ANGLE_BRACKET)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrecisionTimestampTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return TestFileParser.RULE_precisionTimestampType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class PrecisionTimestampContext(PrecisionTimestampTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.PrecisionTimestampTypeContext
            super().__init__(parser)
            self.isnull = None  # Token
            self.precision = None  # NumericParameterContext
            self.copyFrom(ctx)

        def PTs(self):
            return self.getToken(TestFileParser.PTs, 0)

        def O_ANGLE_BRACKET(self):
            return self.getToken(TestFileParser.O_ANGLE_BRACKET, 0)

        def C_ANGLE_BRACKET(self):
            return self.getToken(TestFileParser.C_ANGLE_BRACKET, 0)

        def numericParameter(self):
            return self.getTypedRuleContext(TestFileParser.NumericParameterContext, 0)

        def QMARK(self):
            return self.getToken(TestFileParser.QMARK, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrecisionTimestamp"):
                listener.enterPrecisionTimestamp(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrecisionTimestamp"):
                listener.exitPrecisionTimestamp(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrecisionTimestamp"):
                return visitor.visitPrecisionTimestamp(self)
            else:
                return visitor.visitChildren(self)

    def precisionTimestampType(self):

        localctx = TestFileParser.PrecisionTimestampTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 72, self.RULE_precisionTimestampType)
        self._la = 0  # Token type
        try:
            localctx = TestFileParser.PrecisionTimestampContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.match(TestFileParser.PTs)
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 92:
                self.state = 351
                localctx.isnull = self.match(TestFileParser.QMARK)

            self.state = 354
            self.match(TestFileParser.O_ANGLE_BRACKET)
            self.state = 355
            localctx.precision = self.numericParameter()
            self.state = 356
            self.match(TestFileParser.C_ANGLE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrecisionTimestampTZTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return TestFileParser.RULE_precisionTimestampTZType

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class PrecisionTimestampTZContext(PrecisionTimestampTZTypeContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.PrecisionTimestampTZTypeContext
            super().__init__(parser)
            self.isnull = None  # Token
            self.precision = None  # NumericParameterContext
            self.copyFrom(ctx)

        def PTsTZ(self):
            return self.getToken(TestFileParser.PTsTZ, 0)

        def O_ANGLE_BRACKET(self):
            return self.getToken(TestFileParser.O_ANGLE_BRACKET, 0)

        def C_ANGLE_BRACKET(self):
            return self.getToken(TestFileParser.C_ANGLE_BRACKET, 0)

        def numericParameter(self):
            return self.getTypedRuleContext(TestFileParser.NumericParameterContext, 0)

        def QMARK(self):
            return self.getToken(TestFileParser.QMARK, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterPrecisionTimestampTZ"):
                listener.enterPrecisionTimestampTZ(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitPrecisionTimestampTZ"):
                listener.exitPrecisionTimestampTZ(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitPrecisionTimestampTZ"):
                return visitor.visitPrecisionTimestampTZ(self)
            else:
                return visitor.visitChildren(self)

    def precisionTimestampTZType(self):

        localctx = TestFileParser.PrecisionTimestampTZTypeContext(
            self, self._ctx, self.state
        )
        self.enterRule(localctx, 74, self.RULE_precisionTimestampTZType)
        self._la = 0  # Token type
        try:
            localctx = TestFileParser.PrecisionTimestampTZContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 358
            self.match(TestFileParser.PTsTZ)
            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la == 92:
                self.state = 359
                localctx.isnull = self.match(TestFileParser.QMARK)

            self.state = 362
            self.match(TestFileParser.O_ANGLE_BRACKET)
            self.state = 363
            localctx.precision = self.numericParameter()
            self.state = 364
            self.match(TestFileParser.C_ANGLE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterizedTypeContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fixedCharType(self):
            return self.getTypedRuleContext(TestFileParser.FixedCharTypeContext, 0)

        def varCharType(self):
            return self.getTypedRuleContext(TestFileParser.VarCharTypeContext, 0)

        def fixedBinaryType(self):
            return self.getTypedRuleContext(TestFileParser.FixedBinaryTypeContext, 0)

        def decimalType(self):
            return self.getTypedRuleContext(TestFileParser.DecimalTypeContext, 0)

        def precisionTimestampType(self):
            return self.getTypedRuleContext(
                TestFileParser.PrecisionTimestampTypeContext, 0
            )

        def precisionTimestampTZType(self):
            return self.getTypedRuleContext(
                TestFileParser.PrecisionTimestampTZTypeContext, 0
            )

        def getRuleIndex(self):
            return TestFileParser.RULE_parameterizedType

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterParameterizedType"):
                listener.enterParameterizedType(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitParameterizedType"):
                listener.exitParameterizedType(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitParameterizedType"):
                return visitor.visitParameterizedType(self)
            else:
                return visitor.visitChildren(self)

    def parameterizedType(self):

        localctx = TestFileParser.ParameterizedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_parameterizedType)
        try:
            self.state = 372
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 366
                self.fixedCharType()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 367
                self.varCharType()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 3)
                self.state = 368
                self.fixedBinaryType()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 4)
                self.state = 369
                self.decimalType()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 5)
                self.state = 370
                self.precisionTimestampType()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 6)
                self.state = 371
                self.precisionTimestampTZType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericParameterContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def getRuleIndex(self):
            return TestFileParser.RULE_numericParameter

        def copyFrom(self, ctx: ParserRuleContext):
            super().copyFrom(ctx)

    class IntegerLiteralContext(NumericParameterContext):
        def __init__(
            self, parser, ctx: ParserRuleContext
        ):  # actually a TestFileParser.NumericParameterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_LITERAL(self):
            return self.getToken(TestFileParser.INTEGER_LITERAL, 0)

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterIntegerLiteral"):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitIntegerLiteral"):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitIntegerLiteral"):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)

    def numericParameter(self):

        localctx = TestFileParser.NumericParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_numericParameter)
        try:
            localctx = TestFileParser.IntegerLiteralContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.match(TestFileParser.INTEGER_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubstraitErrorContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR_RESULT(self):
            return self.getToken(TestFileParser.ERROR_RESULT, 0)

        def UNDEFINED_RESULT(self):
            return self.getToken(TestFileParser.UNDEFINED_RESULT, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_substraitError

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterSubstraitError"):
                listener.enterSubstraitError(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitSubstraitError"):
                listener.exitSubstraitError(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitSubstraitError"):
                return visitor.visitSubstraitError(self)
            else:
                return visitor.visitChildren(self)

    def substraitError(self):

        localctx = TestFileParser.SubstraitErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_substraitError)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            _la = self._input.LA(1)
            if not (_la == 5 or _la == 6):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_optionContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def option_name(self):
            return self.getTypedRuleContext(TestFileParser.Option_nameContext, 0)

        def COLON(self):
            return self.getToken(TestFileParser.COLON, 0)

        def option_value(self):
            return self.getTypedRuleContext(TestFileParser.Option_valueContext, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_func_option

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc_option"):
                listener.enterFunc_option(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc_option"):
                listener.exitFunc_option(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunc_option"):
                return visitor.visitFunc_option(self)
            else:
                return visitor.visitChildren(self)

    def func_option(self):

        localctx = TestFileParser.Func_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_func_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.option_name()
            self.state = 379
            self.match(TestFileParser.COLON)
            self.state = 380
            self.option_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Option_nameContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVERFLOW(self):
            return self.getToken(TestFileParser.OVERFLOW, 0)

        def ROUNDING(self):
            return self.getToken(TestFileParser.ROUNDING, 0)

        def IDENTIFIER(self):
            return self.getToken(TestFileParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_option_name

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOption_name"):
                listener.enterOption_name(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOption_name"):
                listener.exitOption_name(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOption_name"):
                return visitor.visitOption_name(self)
            else:
                return visitor.visitChildren(self)

    def option_name(self):

        localctx = TestFileParser.Option_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_option_name)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            _la = self._input.LA(1)
            if not (_la == 7 or _la == 8 or _la == 82):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Option_valueContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(TestFileParser.ERROR, 0)

        def SATURATE(self):
            return self.getToken(TestFileParser.SATURATE, 0)

        def SILENT(self):
            return self.getToken(TestFileParser.SILENT, 0)

        def TIE_TO_EVEN(self):
            return self.getToken(TestFileParser.TIE_TO_EVEN, 0)

        def NAN(self):
            return self.getToken(TestFileParser.NAN, 0)

        def getRuleIndex(self):
            return TestFileParser.RULE_option_value

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterOption_value"):
                listener.enterOption_value(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitOption_value"):
                listener.exitOption_value(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitOption_value"):
                return visitor.visitOption_value(self)
            else:
                return visitor.visitChildren(self)

    def option_value(self):

        localctx = TestFileParser.Option_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_option_value)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            _la = self._input.LA(1)
            if not ((((_la) & ~0x3F) == 0 and ((1 << _la) & 15872) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_optionsContext(ParserRuleContext):
        __slots__ = "parser"

        def __init__(
            self, parser, parent: ParserRuleContext = None, invokingState: int = -1
        ):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_option(self, i: int = None):
            if i is None:
                return self.getTypedRuleContexts(TestFileParser.Func_optionContext)
            else:
                return self.getTypedRuleContext(TestFileParser.Func_optionContext, i)

        def COMMA(self, i: int = None):
            if i is None:
                return self.getTokens(TestFileParser.COMMA)
            else:
                return self.getToken(TestFileParser.COMMA, i)

        def getRuleIndex(self):
            return TestFileParser.RULE_func_options

        def enterRule(self, listener: ParseTreeListener):
            if hasattr(listener, "enterFunc_options"):
                listener.enterFunc_options(self)

        def exitRule(self, listener: ParseTreeListener):
            if hasattr(listener, "exitFunc_options"):
                listener.exitFunc_options(self)

        def accept(self, visitor: ParseTreeVisitor):
            if hasattr(visitor, "visitFunc_options"):
                return visitor.visitFunc_options(self)
            else:
                return visitor.visitChildren(self)

    def func_options(self):

        localctx = TestFileParser.Func_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_func_options)
        self._la = 0  # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.func_option()
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la == 89:
                self.state = 387
                self.match(TestFileParser.COMMA)
                self.state = 388
                self.func_option()
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx
